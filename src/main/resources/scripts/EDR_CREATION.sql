-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2022-12-08 23:35:49 EST
--   site:      Oracle Database 21c
--   type:      Oracle Database 21c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE auth_sem (
    event_id      NUMBER(10) NOT NULL,
    author_id     NUMBER(10) NOT NULL,
    invitation_id NUMBER(10) NOT NULL
);

COMMENT ON COLUMN auth_sem.invitation_id IS
    'Inviatation ID for the seminar for the Author';

ALTER TABLE auth_sem ADD CONSTRAINT auth_sem_pk PRIMARY KEY ( event_id,
                                                              author_id );

CREATE TABLE authors (
    author_id NUMBER(10) NOT NULL,
    a_fname   VARCHAR2(32) NOT NULL,
    a_lname   VARCHAR2(32) NOT NULL,
    a_email   VARCHAR2(32) NOT NULL,
    a_ph_no   NUMBER(10) NOT NULL,
    a_street  VARCHAR2(32) NOT NULL,
    a_city    VARCHAR2(32) NOT NULL,
    a_state   VARCHAR2(32) NOT NULL,
    a_zipcode VARCHAR2(10) NOT NULL
);

COMMENT ON COLUMN authors.author_id IS
    'AUTHOR ID ASSIGNED TO EACH AUTHOR WHSE BOOK FARE SELLS';

COMMENT ON COLUMN authors.a_fname IS
    'First name of the author';

COMMENT ON COLUMN authors.a_lname IS
    'Last  name of the author';

COMMENT ON COLUMN authors.a_email IS
    'Email of author';

COMMENT ON COLUMN authors.a_ph_no IS
    'phone number of author';

COMMENT ON COLUMN authors.a_street IS
    'street';

COMMENT ON COLUMN authors.a_city IS
    'City';

COMMENT ON COLUMN authors.a_state IS
    'state';

COMMENT ON COLUMN authors.a_zipcode IS
    'zip code';

ALTER TABLE authors ADD CONSTRAINT authors_pk PRIMARY KEY ( author_id );

CREATE TABLE book_auth (
    author_id NUMBER(10) NOT NULL,
    book_id   NUMBER(10) NOT NULL
);

ALTER TABLE book_auth ADD CONSTRAINT book_auth_pk PRIMARY KEY ( author_id,
                                                                book_id );

CREATE TABLE book_inv (
    book_id      NUMBER(10) NOT NULL,
    book_inv_id  NUMBER(10) NOT NULL,
    is_available NUMBER NOT NULL
);

COMMENT ON COLUMN book_inv.book_inv_id IS
    'ID ASSIGGNE TO EACH BOOK';

COMMENT ON COLUMN book_inv.is_available IS
    '0 if book is rented 1 if available';

ALTER TABLE book_inv ADD CONSTRAINT book_inv_pk PRIMARY KEY ( book_inv_id );

CREATE TABLE books (
    book_id  NUMBER(10) NOT NULL,
    b_name   VARCHAR2(32) NOT NULL,
    topic_id NUMBER(10) NOT NULL
);

COMMENT ON COLUMN books.book_id IS
    'UNIQUE ID FOR BOOKS';

COMMENT ON COLUMN books.b_name IS
    'NAME OF THE BOOK';

ALTER TABLE books ADD CONSTRAINT books_pk PRIMARY KEY ( book_id );

CREATE TABLE cus_exh (
    registration_id NUMBER(10) NOT NULL,
    cus_id          NUMBER(10) NOT NULL,
    event_id        NUMBER(10) NOT NULL
);

COMMENT ON COLUMN cus_exh.registration_id IS
    'REGISTRATION ID FOR EACH EVENT FOR EACH CUSTOMER';

ALTER TABLE cus_exh ADD CONSTRAINT cus_exh_pk PRIMARY KEY ( cus_id,
                                                            event_id );

CREATE TABLE customer (
    cus_id         NUMBER(10) NOT NULL,
    c_fname        VARCHAR2(32) NOT NULL,
    c_lname        VARCHAR2(32) NOT NULL,
    c_ph_no        NUMBER(10) NOT NULL,
    c_email        VARCHAR2(32) NOT NULL,
    c_street       VARCHAR2(32) NOT NULL,
    c_city         VARCHAR2(32) NOT NULL,
    c_state        VARCHAR2(32) NOT NULL,
    c_zipcode      VARCHAR2(10) NOT NULL,
    c_identiy_type VARCHAR2(32) NOT NULL,
    c_identity_no  NUMBER(10) NOT NULL,
    password       VARCHAR2(32)
);

COMMENT ON COLUMN customer.cus_id IS
    'UNIQUE ID ASSIGNED TO CUSTOMER BY FARE';

COMMENT ON COLUMN customer.c_fname IS
    'FIRST NAME OF THE CUSTOMER';

COMMENT ON COLUMN customer.c_lname IS
    'LAST  NAME OF THE CUSTOMER';

COMMENT ON COLUMN customer.c_ph_no IS
    '10-DIGIT PHONE NUMBER OF THE CUSTOMER';

COMMENT ON COLUMN customer.c_email IS
    'EMAIL ID OF THE CUSTOMER';

COMMENT ON COLUMN customer.c_street IS
    'STREET OF THE CUSTOMER RESIDENCE';

COMMENT ON COLUMN customer.c_city IS
    'CITY OF THE CUSTOMER RESIDENCY';

COMMENT ON COLUMN customer.c_state IS
    'STATE WHERE THE CUSTOMER RESIDES';

COMMENT ON COLUMN customer.c_zipcode IS
    'ZIPCODE OF THE CUSTOMER RESIDENCY';

COMMENT ON COLUMN customer.c_identiy_type IS
    'IDENTIFICATION TYPE OF THE CUSTOMER( VALID TYPE CAN BE ONE OF THESE THREE– PASSPORT, SSN, OR DRIVER LICENSE)';

COMMENT ON COLUMN customer.c_identity_no IS
    'ID NUMBER OF THE CUSTOMER';

ALTER TABLE customer ADD CONSTRAINT customer_pk PRIMARY KEY ( cus_id );

CREATE TABLE employee (
    emp_id         NUMBER(10) NOT NULL,
    e_fname        VARCHAR2(32) NOT NULL,
    e_lname        VARCHAR2(32) NOT NULL,
    e_ph_no        NUMBER(10) NOT NULL,
    e_email        VARCHAR2(32) NOT NULL,
    e_street       VARCHAR2(32) NOT NULL,
    e_city         VARCHAR2(32) NOT NULL,
    e_state        VARCHAR2(32) NOT NULL,
    e_zipcode      VARCHAR2(10) NOT NULL,
    e_identiy_type VARCHAR2(32) NOT NULL,
    e_identity_no  NUMBER(10) NOT NULL,
    e_password     VARCHAR2(32)
);

COMMENT ON COLUMN employee.emp_id IS
    'UNIQUE ID ASSIGNED TO CUSTOMER BY FARE';

COMMENT ON COLUMN employee.e_fname IS
    'FIRST NAME OF THE CUSTOMER';

COMMENT ON COLUMN employee.e_lname IS
    'LAST  NAME OF THE CUSTOMER';

COMMENT ON COLUMN employee.e_ph_no IS
    '10-DIGIT PHONE NUMBER OF THE CUSTOMER';

COMMENT ON COLUMN employee.e_email IS
    'EMAIL ID OF THE CUSTOMER';

COMMENT ON COLUMN employee.e_street IS
    'STREET OF THE CUSTOMER RESIDENCE';

COMMENT ON COLUMN employee.e_city IS
    'CITY OF THE CUSTOMER RESIDENCY';

COMMENT ON COLUMN employee.e_state IS
    'STATE WHERE THE CUSTOMER RESIDES';

COMMENT ON COLUMN employee.e_zipcode IS
    'ZIPCODE OF THE CUSTOMER RESIDENCY';

COMMENT ON COLUMN employee.e_identiy_type IS
    'IDENTIFICATION TYPE OF THE CUSTOMER( VALID TYPE CAN BE ONE OF THESE THREE– PASSPORT, SSN, OR DRIVER LICENSE)';

COMMENT ON COLUMN employee.e_identity_no IS
    'ID NUMBER OF THE CUSTOMER';

ALTER TABLE employee ADD CONSTRAINT customerv1_pk PRIMARY KEY ( emp_id );

CREATE TABLE events (
    event_id    NUMBER(10) NOT NULL,
    event_name  VARCHAR2(32) NOT NULL,
    event_type  CHAR(1) NOT NULL,
    topic_id    NUMBER(10) NOT NULL,
    event_start DATE NOT NULL,
    event_stop  DATE NOT NULL
);

ALTER TABLE events
    ADD CONSTRAINT ch_inh_events CHECK ( event_type IN ( 'E', 'S' ) );

COMMENT ON COLUMN events.event_id IS
    'UNIQUE ID ASSIGNED TO EACH EVENT';

COMMENT ON COLUMN events.event_name IS
    'Name of the Event';

COMMENT ON COLUMN events.event_type IS
    'S IF IT IS SEMINAR OR E IF IT IS EXHIBITION';

COMMENT ON COLUMN events.event_start IS
    'event start date time';

COMMENT ON COLUMN events.event_stop IS
    'event stop  date time';

ALTER TABLE events ADD CONSTRAINT events_pk PRIMARY KEY ( event_id );

CREATE TABLE exhibition (
    event_id NUMBER(10) NOT NULL,
    expense  NUMBER(10, 2) NOT NULL
);

COMMENT ON COLUMN exhibition.event_id IS
    'UNIQUE ID ASSIGNED TO EACH EVENT';

COMMENT ON COLUMN exhibition.expense IS
    'EXPENSE FOR EACH SEMINAR IN DOLLARS';

ALTER TABLE exhibition ADD CONSTRAINT exhibition_pk PRIMARY KEY ( event_id );

CREATE TABLE invoice (
    invoice_id NUMBER(10) NOT NULL,
    amount     NUMBER(10, 2) NOT NULL,
    rental_id  NUMBER(10) NOT NULL
);

COMMENT ON COLUMN invoice.invoice_id IS
    'INVOICE ID FOR RENTAL';

COMMENT ON COLUMN invoice.amount IS
    'INVOICE AMOUNT';

ALTER TABLE invoice ADD CONSTRAINT invoice_pk PRIMARY KEY ( invoice_id );

CREATE TABLE payments (
    payment_id    NUMBER(10) NOT NULL,
    pay_method    VARCHAR2(32) NOT NULL,
    card_hol_name VARCHAR2(32),
    pay_amount    NUMBER(10, 2) NOT NULL,
    invoice_id    NUMBER(10) NOT NULL
);

COMMENT ON COLUMN payments.payment_id IS
    'PAYMENT ID GENERATED AGAINST EACH PAYMENT';

COMMENT ON COLUMN payments.pay_method IS
    'PAYMENT METHOD SUSED FOR THIS PAYMENT SUCH AS Cash, Credit, Debit
or PayPal';

COMMENT ON COLUMN payments.card_hol_name IS
    'NAME OF THE CARD HOLDER IF THE PAYMENT METHOD IS BY CARD';

COMMENT ON COLUMN payments.pay_amount IS
    'AMOUNT PAYED';

ALTER TABLE payments ADD CONSTRAINT payments_pk PRIMARY KEY ( payment_id );

CREATE TABLE rental_serv (
    rental_id     NUMBER(10) NOT NULL,
    rental_status VARCHAR2(32) NOT NULL,
    borrow_date   DATE NOT NULL,
    exp_ret_date  DATE NOT NULL,
    act_ret_date  DATE,
    book_inv_id   NUMBER(10) NOT NULL,
    cus_id        NUMBER(10) NOT NULL
);

COMMENT ON COLUMN rental_serv.rental_id IS
    'ID ASSIGNED TO RENTAL';

COMMENT ON COLUMN rental_serv.rental_status IS
    'Status can be one of three, Borrowed, Returned or Late';

COMMENT ON COLUMN rental_serv.borrow_date IS
    'DATE WHEN THE BOOK WAS BORROWED';

COMMENT ON COLUMN rental_serv.exp_ret_date IS
    'EXPECTED RETURN DATE FOR BOOK';

COMMENT ON COLUMN rental_serv.act_ret_date IS
    'ACTUAL  DATE WHEN THE  BOOK WAS RETURNED';

ALTER TABLE rental_serv ADD CONSTRAINT rental_serv_pk PRIMARY KEY ( rental_id );

CREATE TABLE reservation (
    reservation_id NUMBER(10) NOT NULL,
    res_date       DATE NOT NULL,
    slot           CHAR(2) NOT NULL,
    cus_id         NUMBER(10) NOT NULL,
    room_id        NUMBER(10) NOT NULL
);

COMMENT ON COLUMN reservation.reservation_id IS
    'RESERVATION ID';

COMMENT ON COLUMN reservation.res_date IS
    'DATE FOR WHICH THE ROOM IS RESERVED';

COMMENT ON COLUMN reservation.slot IS
    '8AM to 10 AM (S1), 11 AM to 1 PM (S2),1 PM to 3 PM (S3) and 4 PM to 6 PM (S4).';

ALTER TABLE reservation ADD CONSTRAINT reservation_pk PRIMARY KEY ( reservation_id );

CREATE TABLE rooms (
    room_id      NUMBER(10) NOT NULL,
    max_cap      NUMBER(2) NOT NULL,
    is_inservice NUMBER NOT NULL
);

COMMENT ON COLUMN rooms.room_id IS
    'ROOM ID';

COMMENT ON COLUMN rooms.max_cap IS
    'MAXIMUM CAPACITY OF THE ROOM';

COMMENT ON COLUMN rooms.is_inservice IS
    '1 if available 0 if not due to any maintainance/renovation';

ALTER TABLE rooms ADD CONSTRAINT rooms_pk PRIMARY KEY ( room_id );

CREATE TABLE sem_spon (
    amount     NUMBER(10, 2) NOT NULL,
    event_id   NUMBER(10) NOT NULL,
    sponsor_id NUMBER(10) NOT NULL
);

COMMENT ON COLUMN sem_spon.amount IS
    'AMOUNT  FOR EACH SEMINAR BY EACH SPONSOR IN DOLLARS';

ALTER TABLE sem_spon ADD CONSTRAINT sem_spon_pk PRIMARY KEY ( event_id,
                                                              sponsor_id );

CREATE TABLE seminar (
    event_id NUMBER(10) NOT NULL
);

COMMENT ON COLUMN seminar.event_id IS
    'UNIQUE ID ASSIGNED TO EACH EVENT';

ALTER TABLE seminar ADD CONSTRAINT seminar_pk PRIMARY KEY ( event_id );

CREATE TABLE slots (
    slot      VARCHAR2(2) NOT NULL,
    slot_time VARCHAR2(32)
);

ALTER TABLE slots ADD CONSTRAINT slots_pk PRIMARY KEY ( slot );

CREATE TABLE sponsors (
    sponsor_id NUMBER(10) NOT NULL,
    s_fname    VARCHAR2(32) NOT NULL,
    s_lname    VARCHAR2(32),
    s_type     CHAR(1) NOT NULL
);

COMMENT ON COLUMN sponsors.sponsor_id IS
    'ID ASSIGNED TO EACH SPONSORS';

COMMENT ON COLUMN sponsors.s_fname IS
    'FIRST NAME OF THE SPONSOR/ORGANIZATION NAME IF SPONSOR IS AN ORGANIZATION';

COMMENT ON COLUMN sponsors.s_lname IS
    'LAST  NAME OF THE SPONSOR/NULL IF SPONSOR IS AN ORGANIZATION/IF THE PERSON DON"T HAVE LAST NAME';

COMMENT ON COLUMN sponsors.s_type IS
    'O IF THE SPONSOR IS ORGANIZAION, P if it is a person';

ALTER TABLE sponsors ADD CONSTRAINT sponsors_pk PRIMARY KEY ( sponsor_id );

CREATE TABLE topic_auth (
    topic_id  NUMBER(10) NOT NULL,
    author_id NUMBER(10) NOT NULL
);

ALTER TABLE topic_auth ADD CONSTRAINT topic_auth_pk PRIMARY KEY ( topic_id,
                                                                  author_id );

CREATE TABLE topics (
    topic_id   NUMBER(10) NOT NULL,
    topic_name VARCHAR2(32) NOT NULL
);

COMMENT ON COLUMN topics.topic_id IS
    'ID FOR PARTICULAR TOPIC';

COMMENT ON COLUMN topics.topic_name IS
    'NAME OF THE TOPIC';

ALTER TABLE topics ADD CONSTRAINT topics_pk PRIMARY KEY ( topic_id );

ALTER TABLE auth_sem
    ADD CONSTRAINT auth_sem_authors_fk FOREIGN KEY ( author_id )
        REFERENCES authors ( author_id );

ALTER TABLE auth_sem
    ADD CONSTRAINT auth_sem_seminar_fk FOREIGN KEY ( event_id )
        REFERENCES seminar ( event_id );

ALTER TABLE book_auth
    ADD CONSTRAINT book_auth_authors_fk FOREIGN KEY ( author_id )
        REFERENCES authors ( author_id );

ALTER TABLE book_auth
    ADD CONSTRAINT book_auth_books_fk FOREIGN KEY ( book_id )
        REFERENCES books ( book_id );

ALTER TABLE book_inv
    ADD CONSTRAINT book_inv_books_fk FOREIGN KEY ( book_id )
        REFERENCES books ( book_id );

ALTER TABLE books
    ADD CONSTRAINT books_topics_fk FOREIGN KEY ( topic_id )
        REFERENCES topics ( topic_id );

ALTER TABLE cus_exh
    ADD CONSTRAINT cus_exh_customer_fk FOREIGN KEY ( cus_id )
        REFERENCES customer ( cus_id );

ALTER TABLE cus_exh
    ADD CONSTRAINT cus_exh_exhibition_fk FOREIGN KEY ( event_id )
        REFERENCES exhibition ( event_id );

ALTER TABLE events
    ADD CONSTRAINT events_topics_fk FOREIGN KEY ( topic_id )
        REFERENCES topics ( topic_id );

ALTER TABLE exhibition
    ADD CONSTRAINT exhibition_events_fk FOREIGN KEY ( event_id )
        REFERENCES events ( event_id );

ALTER TABLE invoice
    ADD CONSTRAINT invoice_rental_serv_fk FOREIGN KEY ( rental_id )
        REFERENCES rental_serv ( rental_id );

ALTER TABLE payments
    ADD CONSTRAINT payments_invoice_fk FOREIGN KEY ( invoice_id )
        REFERENCES invoice ( invoice_id );

ALTER TABLE rental_serv
    ADD CONSTRAINT rental_serv_book_inv_fk FOREIGN KEY ( book_inv_id )
        REFERENCES book_inv ( book_inv_id );

ALTER TABLE rental_serv
    ADD CONSTRAINT rental_serv_customer_fk FOREIGN KEY ( cus_id )
        REFERENCES customer ( cus_id );

ALTER TABLE reservation
    ADD CONSTRAINT reservation_customer_fk FOREIGN KEY ( cus_id )
        REFERENCES customer ( cus_id );

ALTER TABLE reservation
    ADD CONSTRAINT reservation_rooms_fk FOREIGN KEY ( room_id )
        REFERENCES rooms ( room_id );

ALTER TABLE sem_spon
    ADD CONSTRAINT sem_spon_seminar_fk FOREIGN KEY ( event_id )
        REFERENCES seminar ( event_id );

ALTER TABLE sem_spon
    ADD CONSTRAINT sem_spon_sponsors_fk FOREIGN KEY ( sponsor_id )
        REFERENCES sponsors ( sponsor_id );

ALTER TABLE seminar
    ADD CONSTRAINT seminar_events_fk FOREIGN KEY ( event_id )
        REFERENCES events ( event_id );

ALTER TABLE topic_auth
    ADD CONSTRAINT topic_auth_authors_fk FOREIGN KEY ( author_id )
        REFERENCES authors ( author_id );

ALTER TABLE topic_auth
    ADD CONSTRAINT topic_auth_topics_fk FOREIGN KEY ( topic_id )
        REFERENCES topics ( topic_id );

CREATE OR REPLACE TRIGGER arc_fkarc_12_seminar BEFORE
    INSERT OR UPDATE OF event_id ON seminar
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.event_type
    INTO d
    FROM
        events a
    WHERE
        a.event_id = :new.event_id;

    IF ( d IS NULL OR d <> 'S' ) THEN
        raise_application_error(-20223, 'FK SEMINAR_EVENTS_FK in Table SEMINAR violates Arc constraint on Table EVENTS - discriminator column EVENT_TYPE doesn''t have value ''S'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_12_exhibition BEFORE
    INSERT OR UPDATE OF event_id ON exhibition
    FOR EACH ROW
DECLARE
    d CHAR(1);
BEGIN
    SELECT
        a.event_type
    INTO d
    FROM
        events a
    WHERE
        a.event_id = :new.event_id;

    IF ( d IS NULL OR d <> 'E' ) THEN
        raise_application_error(-20223, 'FK EXHIBITION_EVENTS_FK in Table EXHIBITION violates Arc constraint on Table EVENTS - discriminator column EVENT_TYPE doesn''t have value ''E'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

ALTER TABLE CUSTOMER
ADD C_OTP number(6);

ALTER TABLE EMPLOYEE
ADD E_OTP number(6);



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            21
-- CREATE INDEX                             0
-- ALTER TABLE                             43
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           2
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
